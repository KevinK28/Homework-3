[
  {
    "objectID": "Homework3.html",
    "href": "Homework3.html",
    "title": "Homework 3",
    "section": "",
    "text": "If your working directory is myfolder/homework/, what relative path would you specify to get the file located at myfolder/MyData.csv?\n\nTo obtain this file, the relative path I would specify would be ../MyData.csv\n\nWhat are the major benefits of using R projects?\n\nOne of the main benefits of using R projects is the ability to collaborate with others. R projects allow us to connect to external sources such as github to make it easier for people to work on a project together. It also gives us a straightforward way to divide up work with others.\n\nWhat is git and what is github?\n\nGit is a version control software that gives us the ability to track changes we make to files and allows users to work on the same project. Github is the hosting services that lets us work with Git-based projects and share them within a team or outside of that.\n\nWhat are the two main differences between a tibble and a data.frame?\n\nThe two main differences between a tibble and a data frame are the printing of the data and subsetting. Printing a data frame results in displaying all rows and columns by default and, in many cases, not visually appealing. Printing a tibble will result in more readable output and will only display the first 10 rows and the amount of columns to fit the screen. Printing a tibble will also display column types. Subsetting is also different between tibbles and data frames. If we return one column of a data frame, it will result in a vector; however, if we return one column of a tibble, it will result in another tibble.\n\nRewrite the following nested function call using baseR’s chaining operator:\n\narrange(filter(select(as_tibble(iris), starts_with(“Petal”), Species), Petal.Length &lt; 1.55), Species)\nas_tibble(iris) |&gt; select(starts_with(\"Petal\"), Species) |&gt; filter(Petal.Length &lt; 1.55) |&gt; arrange(Species)\n\nWhat is meant by long format data and wide format data? Which do we generally prefer for statistical analysis?\n\nLong format data usually means that each row corresponds to one observation, meaning that we have increased numbers of rows and decreased numbers of columns. Wide format means the opposite, where our data is wider (less rows, more columns) for display purposes. For statistical analysis, we generally prefer our data to be in long format."
  },
  {
    "objectID": "Homework3.html#glass-data",
    "href": "Homework3.html#glass-data",
    "title": "Homework 3",
    "section": "Glass Data",
    "text": "Glass Data\nWe will first read in the glass dataset, which is a csv file.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nglass &lt;- read_csv(\"../glass.data\",\n                  col_names = c(\"Id\", \"RI\", \"Na\", \"Mg\", \"Al\", \"Si\", \"K\", \"Ca\",\n                                \"Ba\", \"Fe\", \"Type_of_glass\"))\n\nRows: 214 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (11): Id, RI, Na, Mg, Al, Si, K, Ca, Ba, Fe, Type_of_glass\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nglass\n\n# A tibble: 214 × 11\n      Id    RI    Na    Mg    Al    Si     K    Ca    Ba    Fe Type_of_glass\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;         &lt;dbl&gt;\n 1     1  1.52  13.6  4.49  1.1   71.8  0.06  8.75     0  0                1\n 2     2  1.52  13.9  3.6   1.36  72.7  0.48  7.83     0  0                1\n 3     3  1.52  13.5  3.55  1.54  73.0  0.39  7.78     0  0                1\n 4     4  1.52  13.2  3.69  1.29  72.6  0.57  8.22     0  0                1\n 5     5  1.52  13.3  3.62  1.24  73.1  0.55  8.07     0  0                1\n 6     6  1.52  12.8  3.61  1.62  73.0  0.64  8.07     0  0.26             1\n 7     7  1.52  13.3  3.6   1.14  73.1  0.58  8.17     0  0                1\n 8     8  1.52  13.2  3.61  1.05  73.2  0.57  8.24     0  0                1\n 9     9  1.52  14.0  3.58  1.37  72.1  0.56  8.3      0  0                1\n10    10  1.52  13    3.6   1.36  73.0  0.57  8.4      0  0.11             1\n# ℹ 204 more rows\n\n\nNext, we will overwrite the Type_of_glass variable based on the description in the homework file. We will also filter this dataset with only observations where Fe &lt; .2 and Type_of_glass equals tableware or headlamps.\n\nglass &lt;- glass |&gt;\n           mutate(Type_of_glass = as.character(Type_of_glass),\n              Type_of_glass = ifelse(Type_of_glass == \"1\", \n                                \"building_windows_float_processed\",\n                          ifelse(Type_of_glass == \"2\",\n                                 \"building_windows_non_float_processed\",\n                          ifelse(Type_of_glass == \"3\",\n                                 \"vehicle_windows_float_processed\",\n                          ifelse(Type_of_glass == \"4\",\n                                 \"vehicle_windows_non_float_processed\",\n                          ifelse(Type_of_glass == \"5\", \"containers\",\n                          ifelse(Type_of_glass == \"6\", \"tableware\",\n                          ifelse(Type_of_glass == \"7\", \"headlamps\",\n                                 NA_character_)))))))) |&gt;\n  filter(Fe &lt; 0.20 & (Type_of_glass == \"tableware\" |\n                        Type_of_glass == \"headlamps\"))\n\nglass\n\n# A tibble: 38 × 11\n      Id    RI    Na    Mg    Al    Si     K    Ca    Ba    Fe Type_of_glass\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;        \n 1   177  1.52  14    2.39  1.56  72.4  0     9.57  0        0 tableware    \n 2   178  1.52  13.8  2.41  1.19  72.8  0     9.77  0        0 tableware    \n 3   179  1.52  14.5  2.24  1.62  72.4  0     9.26  0        0 tableware    \n 4   180  1.52  14.1  2.19  1.66  72.7  0     9.32  0        0 tableware    \n 5   181  1.51  14.4  1.74  1.54  74.6  0     7.59  0        0 tableware    \n 6   182  1.52  15.0  0.78  1.74  72.5  0     9.95  0        0 tableware    \n 7   183  1.52  14.2  0     2.09  72.7  0    10.9   0        0 tableware    \n 8   184  1.52  14.6  0     0.56  73.5  0    11.2   0        0 tableware    \n 9   185  1.51  17.4  0     0.34  75.4  0     6.65  0        0 tableware    \n10   186  1.51  13.7  3.2   1.81  72.8  1.76  5.43  1.19     0 headlamps    \n# ℹ 28 more rows"
  },
  {
    "objectID": "Homework3.html#yeast-data",
    "href": "Homework3.html#yeast-data",
    "title": "Homework 3",
    "section": "Yeast Data",
    "text": "Yeast Data\nThe next file we will read in is the Yeast data, which is a fixed width field data file\n\nyeast &lt;- read_fwf(\"../yeast.data\",\n                  fwf_widths(c(12, 6, 6, 6, 6, 6, 6, 6, 6, 3),\n                             c(\"seq_name\", \"mcg\", \"gvh\", \"alm\", \"mit\", \"erl\",\n                               \"pox\", \"vac\", \"nuc\", \"class\")))\n\nRows: 1484 Columns: 10\n── Column specification ────────────────────────────────────────────────────────\n\nchr (2): seq_name, class\ndbl (8): mcg, gvh, alm, mit, erl, pox, vac, nuc\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nyeast\n\n# A tibble: 1,484 × 10\n   seq_name     mcg   gvh   alm   mit   erl   pox   vac   nuc class\n   &lt;chr&gt;      &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;\n 1 ADT1_YEAST  0.58  0.61  0.47  0.13   0.5   0    0.48  0.22 MIT  \n 2 ADT2_YEAST  0.43  0.67  0.48  0.27   0.5   0    0.53  0.22 MIT  \n 3 ADT3_YEAST  0.64  0.62  0.49  0.15   0.5   0    0.53  0.22 MIT  \n 4 AAR2_YEAST  0.58  0.44  0.57  0.13   0.5   0    0.54  0.22 NUC  \n 5 AATM_YEAST  0.42  0.44  0.48  0.54   0.5   0    0.48  0.22 MIT  \n 6 AATC_YEAST  0.51  0.4   0.56  0.17   0.5   0.5  0.49  0.22 CYT  \n 7 ABC1_YEAST  0.5   0.54  0.48  0.65   0.5   0    0.53  0.22 MIT  \n 8 BAF1_YEAST  0.48  0.45  0.59  0.2    0.5   0    0.58  0.34 NUC  \n 9 ABF2_YEAST  0.55  0.5   0.66  0.36   0.5   0    0.49  0.22 MIT  \n10 ABP1_YEAST  0.4   0.39  0.6   0.15   0.5   0    0.58  0.3  CYT  \n# ℹ 1,474 more rows\n\n\nNext, we will start a chain that removes the seq_name and nuc columns. This chain will also add columns corresponding to the mean and median of each numeric variable, at each class grouping.\n\nyeast &lt;- yeast |&gt;\n           select(-seq_name, -nuc) |&gt;\n           group_by(class) |&gt;\n           mutate(across(where(is.numeric), list(mean = mean, median = median),\n                  .names = \"{.col}_{.fn}\"))"
  }
]